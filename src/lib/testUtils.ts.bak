/**
 * Utility functions for testing and validation
 */

/**
 * Validate HTML for standards compliance
 * @param html - HTML string to validate
 * @returns Validation results
 */
export function validateHTML(html: string) {
  // In a real implementation, this would use a validation service or library
  // For this example, we'll simulate the validation
  const errors: string[] = [];
  const warnings: string[] = [];
  
  // Simple validation checks
  if (!html.includes('<!DOCTYPE html>')) {
    warnings.push('Missing DOCTYPE declaration');
  }
  
  if (!html.includes('<html lang=')) {
    warnings.push('Missing language attribute on html element');
  }
  
  // Return validation results
  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * Check for accessibility issues
 * @param html - HTML string to check
 * @returns Accessibility issues
 */
export function checkAccessibility(html: string) {
  // In a real implementation, this would use an accessibility testing library
  // For this example, we'll simulate the check
  const issues: Array<{
    impact: 'critical' | 'serious' | 'moderate' | 'minor';
    message: string;
  }> = [];
  
  // Simple accessibility checks
  if (!html.includes('alt=')) {
    issues.push({
      impact: 'serious',
      message: 'Images may be missing alt attributes'
    });
  }
  
  if (!html.includes('aria-')) {
    issues.push({
      impact: 'moderate',
      message: 'ARIA attributes may be missing for interactive elements'
    });
  }
  
  // Return accessibility issues
  return {
    issues
  };
}

/**
 * Test website performance
 * @returns Performance metrics
 */
export async function testPerformance() {
  // In a real implementation, this would use Lighthouse or a similar tool
  // For this example, we'll return simulated performance metrics
  
  return {
    performance: 0.92,
    accessibility: 0.95,
    bestPractices: 0.97,
    seo: 0.94,
    metrics: {
      firstContentfulPaint: '0.8s',
      largestContentfulPaint: '1.2s',
      timeToInteractive: '1.5s',
      totalBlockingTime: '0.1s',
      cumulativeLayoutShift: '0.01'
    }
  };
}

/**
 * Check browser compatibility for features
 * @param features - Array of features to check
 * @returns Compatibility information
 */
export function checkBrowserCompatibility(features: string[]) {
  // In a real implementation, this would use a compatibility database
  // For this example, we'll return simulated compatibility data
  
  const result: Record<string, Record<string, boolean>> = {};
  
  for (const feature of features) {
    result[feature] = {
      'Chrome': true,
      'Firefox': true,
      'Safari': feature !== 'avif',
      'Edge': true,
      'IE11': ['css-grid', 'webp', 'avif', 'intersection-observer'].includes(feature) ? false : true
    };
  }
  
  return result;
}

/**
 * Run comprehensive tests on the website
 */
export async function runTests() {
  console.log('Starting website testing and validation...');
  
  // Test results will be stored here
  const results: {
    html: { valid: boolean; errors: string[]; warnings: string[] },
    accessibility: { issues: Array<{ impact: string; message: string }> },
    performance: any,
    compatibility: any,
  } = {
    html: { valid: false, errors: [], warnings: [] },
    accessibility: { issues: [] },
    performance: {},
    compatibility: {},
  };
  
  // 1. HTML Validation
  console.log('\n--- HTML Validation ---');
  try {
    // In a real scenario, we would get the HTML from the built pages
    // For this example, we'll use a sample HTML string
    const sampleHTML = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Saddam Safi | WordPress Developer Toronto</title>
      </head>
      <body>
        <header>
          <nav>
            <a href="/"><img src="/images/logo.png" alt="Saddam Safi Logo"></a>
            <ul>
              <li><a href="/">Home</a></li>
              <li><a href="/about">About</a></li>
              <li><a href="/services">Services</a></li>
              <li><a href="/projects">Projects</a></li>
              <li><a href="/contact-us">Let's Talk</a></li>
            </ul>
          </nav>
        </header>
        <main>
          <section>
            <h1>Saddam Safi | WordPress Developer Toronto</h1>
            <p>Welcome to my portfolio website!</p>
          </section>
        </main>
        <footer>
          <p>&copy; 2025 Saddam Safi. All rights reserved.</p>
        </footer>
      </body>
      </html>
    `;
    
    results.html = validateHTML(sampleHTML);
    
    if (results.html.valid) {
      console.log('✅ HTML validation passed!');
    } else {
      console.log('❌ HTML validation failed with errors:');
      results.html.errors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (results.html.warnings.length > 0) {
      console.log('⚠️ HTML validation warnings:');
      results.html.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
  } catch (error) {
    console.error('Error during HTML validation:', error);
  }
  
  // 2. Accessibility Check
  console.log('\n--- Accessibility Check ---');
  try {
    // Using the same sample HTML
    const sampleHTML = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Saddam Safi | WordPress Developer Toronto</title>
      </head>
      <body>
        <header>
          <nav>
            <a href="/"><img src="/images/logo.png" alt="Saddam Safi Logo"></a>
            <ul>
              <li><a href="/">Home</a></li>
              <li><a href="/about">About</a></li>
              <li><a href="/services">Services</a></li>
              <li><a href="/projects">Projects</a></li>
              <li><a href="/contact-us">Let's Talk</a></li>
            </ul>
          </nav>
        </header>
        <main>
          <section>
            <h1>Saddam Safi | WordPress Developer Toronto</h1>
            <p>Welcome to my portfolio website!</p>
          </section>
        </main>
        <footer>
          <p>&copy; 2025 Saddam Safi. All rights reserved.</p>
        </footer>
      </body>
      </html>
    `;
    
    results.accessibility = checkAccessibility(sampleHTML);
    
    if (results.accessibility.issues.length === 0) {
      console.log('✅ No accessibility issues found!');
    } else {
      console.log(`⚠️ Found ${results.accessibility.issues.length} accessibility issues:`);
      results.accessibility.issues.forEach(issue => {
        console.log(`  - [${issue.impact.toUpperCase()}] ${issue.message}`);
      });
    }
  } catch (error) {
    console.error('Error during accessibility check:', error);
  }
  
  // 3. Performance Testing
  console.log('\n--- Performance Testing ---');
  try {
    // In a real scenario, we would test the deployed website
    results.performance = await testPerformance();
    
    console.log('Performance Score:', results.performance.performance);
    console.log('Accessibility Score:', results.performance.accessibility);
    console.log('Best Practices Score:', results.performance.bestPractices);
    console.log('SEO Score:', results.performance.seo);
    console.log('Key Metrics:');
    console.log(`  - First Contentful Paint: ${results.performance.metrics.firstContentfulPaint}`);
    console.log(`  - Largest Contentful Paint: ${results.performance.metrics.largestContentfulPaint}`);
    console.log(`  - Time to Interactive: ${results.performance.metrics.timeToInteractive}`);
    console.log(`  - Total Blocking Time: ${results.performance.metrics.totalBlockingTime}`);
    console.log(`  - Cumulative Layout Shift: ${results.performance.metrics.cumulativeLayoutShift}`);
  } catch (error) {
    console.error('Error during performance testing:', error);
  }
  
  // 4. Browser Compatibility Check
  console.log('\n--- Browser Compatibility Check ---');
  try {
    const features = [
      'css-grid',
      'flexbox',
      'webp',
      'avif',
      'intersection-observer',
      'css-variables'
    ];
    
    results.compatibility = checkBrowserCompatibility(features);
    
    console.log('Browser Compatibility Results:');
    Object.entries(results.compatibility).forEach(([feature, support]) => {
      console.log(`\n${feature}:`);
      Object.entries(support).forEach(([browser, isSupported]) => {
        console.log(`  - ${browser}: ${isSupported ? '✅ Supported' : '❌ Not Supported'}`);
      });
    });
  } catch (error) {
    console.error('Error during browser compatibility check:', error);
  }
  
  console.log('\nTesting and validation completed!');
}
